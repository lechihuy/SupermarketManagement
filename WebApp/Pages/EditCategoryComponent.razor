@page "/editcategory/{categoryId}"

<h3>Edit Category</h3>

@inject NavigationManager NavigationManager
@inject IAddCategoryUseCase AddCategoryUseCase
@inject IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject IEditCategoryUseCase EditCategoryUseCase

@if (category != null)
{
    <EditForm Model="category" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Name</label>
            <InputText id="name" @bind-Value="category.Name" class="form-control"></InputText>
        </div>

        <div class="form-group mt-3">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="category.Description" class="form-control"></InputTextArea>
        </div>

        <div class="mt-3">
            <button type="button" class="btn btn-light" @onclick="OnCancel">Cancel</button>
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string categoryId { get; set; }

    private Category category;

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (int.TryParse(this.categoryId, out int categoryId))
        {
            var category = GetCategoryByIdUseCase.Execute(categoryId);
            this.category = new Category
                {
                    CategoryId = category.CategoryId,
                    Name = category.Name,
                    Description = category.Description
                };
        }
    }

    private void OnValidSubmit()
    {
        EditCategoryUseCase.Execute(category);
        NavigationManager.NavigateTo("/categories");
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo("/categories");
    }
}
